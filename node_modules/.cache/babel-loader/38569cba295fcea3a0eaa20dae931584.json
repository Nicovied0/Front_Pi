{"ast":null,"code":"import { GET_COUNTRIES, GET_DETAILS, GET_ACTIVITIES, POST_ACTIVITIES, SEARCH_COUNTRIES, ORDER_BY_NAME, UPWARD, MAX_POPULATION, ORDER_BY_POPULATION, FILTER_BY_CONTINENT, FILTER_BY_ACTIVITIES } from '../../Const/Const';\nconst initialState = {\n  countries: [],\n  allCountries: [],\n  details: [],\n  activities: []\n};\nexport default function rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return {\n        ...state,\n        countries: action.payload,\n        allCountries: action.payload\n      };\n    case SEARCH_COUNTRIES:\n      return {\n        ...state,\n        countries: action.payload\n      };\n    case GET_DETAILS:\n      return {\n        ...state,\n        details: action.payload\n      };\n    case ORDER_BY_NAME:\n      {\n        let orderByName = action.payload === UPWARD ? state.countries.sort((a, b) => {\n          if (a.name < b.name) {\n            return -1;\n          }\n          if (a.name > b.name) {\n            return 1;\n          }\n          return 0;\n        }) : state.countries.sort((a, b) => {\n          if (a.name < b.name) {\n            return 1;\n          }\n          if (a.name > b.name) {\n            return -1;\n          }\n          return 0;\n        });\n        return {\n          ...state,\n          countries: orderByName\n        };\n      }\n    case ORDER_BY_POPULATION:\n      let orderCountriesByPopulation = action.payload === MAX_POPULATION ? state.countries.sort((a, b) => {\n        if (a.population < b.population) {\n          return 1;\n        }\n        if (a.population > b.population) {\n          return -1;\n        }\n        return 0;\n      }) : state.countries.sort((a, b) => {\n        if (a.population < b.population) {\n          return -1;\n        }\n        if (a.population > b.population) {\n          return 1;\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        countries: orderCountriesByPopulation\n      };\n    case FILTER_BY_CONTINENT:\n      const filtredByContinent = state.allCountries;\n      const continentFilteredBC = action.payload === 'All' ? filtredByContinent : filtredByContinent.filter(el => el.continent === action.payload);\n      return {\n        ...state,\n        countries: continentFilteredBC\n      };\n    case FILTER_BY_ACTIVITIES:\n      const filtredByActivities = state.allCountries;\n      const continentFilteredBA = filtredCountriesByActivities.filter(c => {\n        return c.activities.find(c => {\n          return c.name === action.payload;\n        });\n      });\n      if (action.payload === 'todos') {\n        return {\n          ...state,\n          countries: filtredCountriesByActivities\n        };\n      } else {\n        return {\n          ...state,\n          countries: continentFilteredBA\n        };\n      }\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        activities: action.payload\n      };\n    case POST_ACTIVITIES:\n      return {\n        ...state\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_COUNTRIES","GET_DETAILS","GET_ACTIVITIES","POST_ACTIVITIES","SEARCH_COUNTRIES","ORDER_BY_NAME","UPWARD","MAX_POPULATION","ORDER_BY_POPULATION","FILTER_BY_CONTINENT","FILTER_BY_ACTIVITIES","initialState","countries","allCountries","details","activities","rootReducer","state","action","type","payload","orderByName","sort","a","b","name","orderCountriesByPopulation","population","filtredByContinent","continentFilteredBC","filter","el","continent","filtredByActivities","continentFilteredBA","filtredCountriesByActivities","c","find"],"sources":["C:/Users/Nico/Desktop/pi/PI_Countries/client/src/Redux/reducer/index.js"],"sourcesContent":["import { GET_COUNTRIES, GET_DETAILS, GET_ACTIVITIES, POST_ACTIVITIES, SEARCH_COUNTRIES, ORDER_BY_NAME, UPWARD, MAX_POPULATION, ORDER_BY_POPULATION, FILTER_BY_CONTINENT, FILTER_BY_ACTIVITIES } from '../../Const/Const'\r\n\r\n\r\nconst initialState = {\r\n  countries: [],\r\n  allCountries: [],\r\n  details: [],\r\n  activities: []\r\n}\r\n\r\n\r\nexport default function rootReducer(state = initialState, action) {\r\n\r\n  switch (action.type) {\r\n    case GET_COUNTRIES:\r\n      return {\r\n        ...state,\r\n        countries: action.payload,\r\n        allCountries: action.payload\r\n      }\r\n\r\n    case SEARCH_COUNTRIES:\r\n      return {\r\n        ...state,\r\n        countries: action.payload\r\n      }\r\n\r\n    case GET_DETAILS:\r\n      return {\r\n        ...state,\r\n        details: action.payload\r\n      }\r\n\r\n    case ORDER_BY_NAME: {\r\n      let orderByName = action.payload === UPWARD ? state.countries.sort((a, b) => {\r\n        if (a.name < b.name) {\r\n          return -1;\r\n        }\r\n        if (a.name > b.name) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      }) :\r\n        state.countries.sort((a, b) => {\r\n          if (a.name < b.name) {\r\n            return 1;\r\n          }\r\n          if (a.name > b.name) {\r\n            return -1;\r\n          }\r\n          return 0;\r\n        })\r\n      return {\r\n        ...state,\r\n        countries: orderByName\r\n      }\r\n    }\r\n\r\n    case ORDER_BY_POPULATION:\r\n      let orderCountriesByPopulation = action.payload === MAX_POPULATION ? state.countries.sort((a, b) => {\r\n        if (a.population < b.population) {\r\n          return 1;\r\n        }\r\n        if (a.population > b.population) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      }) :\r\n        state.countries.sort((a, b) => {\r\n\r\n          if (a.population < b.population) {\r\n            return -1;\r\n          }\r\n          if (a.population > b.population) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        })\r\n\r\n      return {\r\n        ...state,\r\n        countries: orderCountriesByPopulation\r\n      }\r\n\r\n    case FILTER_BY_CONTINENT:\r\n      const filtredByContinent = state.allCountries\r\n      const continentFilteredBC = action.payload === 'All' ? filtredByContinent : filtredByContinent.filter(el => el.continent === action.payload)\r\n      return {\r\n        ...state,\r\n        countries: continentFilteredBC\r\n      }\r\n    case FILTER_BY_ACTIVITIES:\r\n      const filtredByActivities = state.allCountries\r\n      const continentFilteredBA = filtredCountriesByActivities.filter((c) => { return c.activities.find((c) => { return c.name === action.payload; }); });\r\n\r\n      if (action.payload === 'todos') {\r\n        return { ...state, countries: filtredCountriesByActivities }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          countries: continentFilteredBA\r\n        }\r\n      }\r\n\r\n    case GET_ACTIVITIES:\r\n      return {\r\n        ...state,\r\n        activities: action.payload\r\n      }\r\n\r\n    case POST_ACTIVITIES:\r\n      return {\r\n        ...state\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}